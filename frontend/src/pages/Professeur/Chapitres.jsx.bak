import React, { useState, useEffect } from "react";
import { toast } from 'react-toastify';
import { useCourses } from '@/hooks/useCourses';
impor            <ChapterList
              chapitres={selectedCourseChapters}
              onEdit={handleEditChapter}
              onDelete={handleDeleteChapter}
            />hapters } from '@/hooks/useChapters';
import CourseSelector from "@/components/Teacher/Chapitres/CourseSelector";
import ChapterList from "@/components/Teacher/Chapitres/ChapterList";
import ChapterEditPanel from "@/components/Teacher/Chapitres/ChapterEditPanel";

const ChapitresCours = () => {
  const [selectedCourseId, setSelectedCourseId] = useState("");
  const [isAddingChapter, setIsAddingChapter] = useState(false);
  const [editedChapter, setEditedChapter] = useState(null);

  const [newChapter, setNewChapter] = useState({
    titre: "",
    description: "",
    video: "",
    file: null,
  });

  // Utiliser les hooks pour r√©cup√©rer les vraies donn√©es
  const { 
    courses, 
    loading: coursesLoading, 
    fetchMyCourses 
  } = useCourses();

  const { 
    chapters, 
    loading: chaptersLoading, 
    createChapter, 
    updateChapter, 
    deleteChapter, 
    fetchChapters 
  } = useChapters(selectedCourseId);

  // Charger les cours du formateur au montage
  useEffect(() => {
    fetchMyCourses();
  }, [fetchMyCourses]);

  // Charger les chapitres quand un cours est s√©lectionn√©
  useEffect(() => {
    if (selectedCourseId) {
      fetchChapters(selectedCourseId);
    }
  }, [selectedCourseId, fetchChapters]);

  const handleDeleteChapter = async (chapterId) => {
    if (!window.confirm("√ätes-vous s√ªr de vouloir supprimer ce chapitre ?")) {
      return;
    }

    try {
      await deleteChapter(chapterId);
      toast.success("Chapitre supprim√© avec succ√®s");
    } catch (error) {
      toast.error("Erreur lors de la suppression du chapitre");
      console.error(error);
    }
  };

  const handleEditChapter = (chapter) => {
    setEditedChapter(chapter);
    setIsAddingChapter(false); // fermer l'ajout si modification
  };

  const handleAddChapter = async () => {
    if (!newChapter.titre.trim()) {
      toast.error("Le titre du chapitre est requis");
      return;
    }
    
    if (!selectedCourseId) {
      toast.error("Veuillez s√©lectionner un cours");
      return;
    }

    try {
      await createChapter({
        ...newChapter,
        course_id: selectedCourseId
      });
      
      setIsAddingChapter(false);
      setNewChapter({ titre: "", description: "", video: "", file: null });
      toast.success("Chapitre cr√©√© avec succ√®s");
    } catch (error) {
      toast.error("Erreur lors de la cr√©ation du chapitre");
      console.error(error);
    }
  };

  const handleUpdateChapter = async (chapterData) => {
    if (!editedChapter) return;

    try {
      await updateChapter(editedChapter.id, chapterData);
      setEditedChapter(null);
      toast.success("Chapitre mis √† jour avec succ√®s");
    } catch (error) {
      toast.error("Erreur lors de la mise √† jour du chapitre");
      console.error(error);
    }
  };

  // Obtenir les chapitres du cours s√©lectionn√©
  const selectedCourseChapters = chapters || [];

  return (
    <div className="p-6 max-w-6xl mx-auto">
      <h1 className="text-2xl font-bold text-gray-800 mb-4">Gestion des chapitres</h1>

      {/* Ligne avec dropdown + bouton */}
      <div className="flex items-center justify-between mb-4 gap-4">
        <div className="flex-1">
          <CourseSelector
            courses={courses}
            selectedCourseId={selectedCourseId}
            onSelect={setSelectedCourseId}
            loading={coursesLoading}
          />
        </div>

        {selectedCourseId && (
          <button
            onClick={() => {
              setIsAddingChapter(true);
              setEditedChapter(null); // fermer le panel d'√©dition s‚Äôil √©tait ouvert
            }}
            className="flex items-center gap-2 px-4 py-2 border-2 border-indigo-500 bg-white text-indigo-700 rounded-lg shadow hover:bg-indigo-50 transition"
          >
            <span className="text-xl">+</span> Ajouter un chapitre
          </button>
        )}
      </div>

      {/* Section centrale avec panel lat√©ral √† droite */}
      {selectedCourseId && (
        <div className="flex gap-6">
          {/* Liste des chapitres */}
          <div className="flex-1">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              üìã Chapitres du cours :{" "}
              <span className="text-indigo-600">
                {courses.find((c) => c.id.toString() === selectedCourseId)?.title}
              </span>
            </h2>

            <ChapterList
              chapitres={chaptersByCourseId[selectedCourseId] || []}
              onEdit={(ch) => {
                setEditedChapter(ch);
                setIsAddingChapter(false); // fermer l‚Äôajout si modification
              }}
              onDelete={handleDeleteChapter}
            />
          </div>

          {/* Panel lat√©ral : soit ajout, soit √©dition */}
          {(isAddingChapter || editedChapter) && (
            <div className="w-[350px] bg-white border border-indigo-200 shadow-lg rounded-md p-4">
              <h3 className="text-lg font-bold text-indigo-700 mb-4">
                {editedChapter ? "Modifier le chapitre" : "Ajouter un nouveau chapitre"}
              </h3>

              {/* Formulaire commun */}
              <input
                type="text"
                placeholder="Titre du chapitre"
                className="w-full mb-3 p-2 border rounded"
                value={editedChapter ? editedChapter.titre : newChapter.titre}
                onChange={(e) => {
                  if (editedChapter)
                    setEditedChapter({ ...editedChapter, titre: e.target.value });
                  else
                    setNewChapter({ ...newChapter, titre: e.target.value });
                }}
              />

              <textarea
                placeholder="Description du chapitre"
                rows={3}
                className="w-full mb-3 p-2 border rounded"
                value={editedChapter ? editedChapter.description : newChapter.description}
                onChange={(e) => {
                  if (editedChapter)
                    setEditedChapter({ ...editedChapter, description: e.target.value });
                  else
                    setNewChapter({ ...newChapter, description: e.target.value });
                }}
              />

              <input
                type="url"
                placeholder="Lien YouTube ou Vimeo"
                className="w-full mb-3 p-2 border rounded"
                value={editedChapter ? editedChapter.video : newChapter.video}
                onChange={(e) => {
                  if (editedChapter)
                    setEditedChapter({ ...editedChapter, video: e.target.value });
                  else
                    setNewChapter({ ...newChapter, video: e.target.value });
                }}
              />

              
              <label className="block border-2 border-indigo-500 rounded px-4 py-3 cursor-pointer hover:bg-indigo-50 text-sm font-medium text-gray-700 mb-4 transition">
               üìÅ Choisir un fichier du chapitre
               <input
                 type="file"
                 className="hidden"
                 onChange={(e) => {
                   const file = e.target.files[0];
                   if (!file) return;
                   if (editedChapter)
                     setEditedChapter({ ...editedChapter, file });
                   else setNewChapter({ ...newChapter, file });
                 }}
               />
             </label>

              {/* Boutons */}
              <div className="flex justify-end gap-2">
                <button
                  onClick={() => {
                    if (editedChapter) {
                      console.log("üìå Chapitre modifi√© :", editedChapter);
                      setEditedChapter(null);
                    } else {
                      handleAddChapter();
                    }
                  }}
                  className="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-1 rounded"
                >
                  {editedChapter ? "Enregistrer" : "Ajouter"}
                </button>
                <button
                  onClick={() => {
                    setEditedChapter(null);
                    setIsAddingChapter(false);
                  }}
                  className="text-gray-500 hover:text-gray-800"
                >
                  Annuler
                </button>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ChapitresCours;
